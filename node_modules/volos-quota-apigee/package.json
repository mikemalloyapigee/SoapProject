{
  "name": "volos-quota-apigee",
  "version": "0.11.5",
  "main": "lib/apigeequota.js",
  "license": "MIT",
  "description": "Apigee provider for Quota enforcement in the Volos system.",
  "homepage": "https://github.com/apigee/volos",
  "keywords": [
    "quota",
    "apigee"
  ],
  "dependencies": {
    "apigee-access": ">=1.2.x",
    "debug": "1.0.x",
    "semver": "3.x.x",
    "superagent": "0.x.x",
    "volos-quota-common": "0.10.x"
  },
  "devDependencies": {},
  "repository": {
    "type": "git",
    "url": "https://github.com/apigee/volos.git"
  },
  "readme": "# volos-quota-apigee\n\nThis is an implementation of API quotas for the Volos family of modules. It uses Apigee as a backing store\nto keep quotas synchronized across many nodes. Furthermore, this is the correct module to use if\ndeploying the Node.js application to Apigee, because it will result in quotas that work in the same way\nas the quotas that are built in to the Apigee platform.\n\nOnce initialized, the interface to the module is exactly what is in the \"volos-quota-common\" module. See\nthat module for detailed docs.\n\n## Installing the Adapter\n\nThis module depends on an \"adapter,\" which is a special API that is deployed to Apigee for your specific\norganization in the Apigee cloud. This proxy is hosted in the Volos GitHub repo, which is here:\n\n[https://github.com/apigee/volos](https://github.com/apigee/volos)\n\nThe proxy is inside the \"proxy\" directory. Instructions for deploying it may be found here:\n\n[https://github.com/apigee/volos/blob/master/samples/basic/README.md](https://github.com/apigee/volos/blob/master/samples/basic/README.md)\n\n## Initialization\n\nTo initialize a quota, you call \"create\" on the exported module and pass a single \"options\" object.\nIt can contain the following parameters:\n\n* timeUnit: How often the quota resets -- may be in minutes, hours, days, or weeks\n* interval: Works with the timeUnit to determine how often the quota resets. For instance, every 5 days or 2 weeks.\n* startTime: A time at which the quota calculations should begin. For instance, if there is no start time then a\nquota set to reset in \"one day\" will reset 24 hours after the first message is receiver, but if the start time\nis set to the top of the hour on some day, then the quota will always reset at the top of the hour.\n* allow: The maximum number of requests to allow. This may be overridden on each \"apply\" call if desired.\n* uri: The full URI of the Apigee adapter that you deployed in the last step. For instance, if the organization\nname is \"foo\" then this might be \"https://foo-test.apigee.net/apigee-remote-proxy\". This parameter is\nnot used when the app is always deployed to Apigee Edge, or when \"apigeeMode\" is set to \"local\".\nSee below for more.\n* key: An API consumer key for a valid \"application\" that is part of the same organization where the adapter\nwas installed.\n* bufferSize: (Number) optional, create a local memory buffer to hold up to bufferSize for quota elements\n* bufferTimeout: (Number) optional, flush the memory buffer (if exists) every Number ms (default: 300)\n\nOnce the quota has been initialized, the module that is returned has the programming interface defined\nby the \"volos-quota-common\" module.\n\nThe following parameters are optional:\n\n* apigeeMode (optional): By default, this module will use the OAuth service built in to Apigee Edge when it\nis deployed there, and use an HTTP-based API to the \"uri\" specified above when it is not. This parameter\noverrides that default.\n\n\"apigeeMode\" supports two values:\n\n* remote: When set to \"remote,\" this module will use the \"uri\" specified in the options to communicate\nwith Apigee Edge, even if it is deployed to Apigee Edge. This allows you to use the OAuth services of\nanother organization, for instance.\n* local: When set to \"local,\" this module wil use the \"apigee-access\" module to access Apigee Edge\nfunctionality that is built in to the runtime. If this is set and the module is running outside\nApigee Edge, then all calls will fail.\n\nBy default, the module will use Apigee Edge functionality when available, and fall back to API\ncalls when it is not.\n\n## Example\n\n    var quotaModule = require('volos-quota-apigee');\n    var quota = quotaModule.create({\n      timeUnit: 'day',\n      interval: 1,\n      allow: 10,\n      uri: process.env.APIGEEURI,\n      key: process.env.APIGEEKEY\n      });\n\n    quota.apply({ identifier: 'Foo', weight: 1 }, function(err, result) {\n      if (err) {\n        throw err;\n      } else {\n        console.log('Quota status: %s', result.isAllowed);\n      }\n    });\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/apigee/volos/issues"
  },
  "_id": "volos-quota-apigee@0.11.5",
  "_from": "volos-quota-apigee@"
}
